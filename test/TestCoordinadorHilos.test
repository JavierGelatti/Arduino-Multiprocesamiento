#include "catch.hpp"

#include "StubTiempoActual.h"
#include "../CoordinadorHilos.h"
#include "../Hilo.h"
#include "../Lambda.h"

SCENARIO("creacion de hilos", "[coordinador_hilos]") {
    GIVEN("un coordinador de hilos nuevo") {
        CoordinadorHilos* elCoordinador = new CoordinadorHilos();

        WHEN("se le pregunta la cantidad de hilos") {
            int nroHilos = elCoordinador->cantidadDeHilos();
            
            THEN("es igual a 1") {
                REQUIRE(nroHilos == 1);
            }
        }
        WHEN("se ejecuta código sin condiciones de tiempo") {
            bool ejecutado = false;
            auto codigo = comando(ejecutado = true);
            elCoordinador->agregarCodigo(codigo);
            
            THEN("el código se ejecuta cuando ejecuta el coordinador") {
                REQUIRE(!ejecutado);
                elCoordinador->ejecutar();
                REQUIRE(ejecutado);
            }
        }
        WHEN("se crea un nuevo hilo desde el coordinador") {
            Hilo* unHilo = elCoordinador->crearHilo();
            bool ejecutado = false;
            auto codigo = comando(ejecutado = true);
            
            WHEN("se agrega código al hilo") {   
                unHilo->agregarCodigo(codigo);

                THEN("el código del hilo se ejecuta cuando ejecuta el coordinador") {
                    REQUIRE(!ejecutado);
                    elCoordinador->ejecutar();
                    REQUIRE(ejecutado);
                }
            }
            THEN("el código que se agregue al coordinador se asocia al ultimo hilo creado") {
                elCoordinador->agregarCodigo(codigo);

                REQUIRE(!ejecutado);
                unHilo->ejecutar();
                REQUIRE(ejecutado);
            }
        }
        WHEN("se ejecuta el coordinador sin haber agregado codigo") {
            elCoordinador->ejecutar();
            elCoordinador->ejecutar();
            elCoordinador->ejecutar();
            
            THEN("no hay errores") {
                REQUIRE(true);
            }
            THEN("el hilo vacío se elimina") {
                REQUIRE(elCoordinador->cantidadDeHilos() == 0);
            }

            WHEN("se intenta registrar una demora") {
                elCoordinador->demorarSiguienteCodigoEn(10);
                
                THEN("no hay errores") {
                    REQUIRE(true);
                }
                THEN("se crea un nuevo hilo") {
                    REQUIRE(elCoordinador->cantidadDeHilos() == 1);
                }
            }
        }
    }
    GIVEN("un coordinador de hilos sin hilos") {
        CoordinadorHilos* elCoordinador = new CoordinadorHilos();
        elCoordinador->ejecutar();
        REQUIRE(elCoordinador->cantidadDeHilos() == 0);
        
        WHEN("se agrega código") {
            bool ejecutado = false;
            auto codigo = comando(ejecutado = true);
            elCoordinador->agregarCodigo(codigo);
            
            THEN("se crea un nuevo hilo") {
                REQUIRE(elCoordinador->cantidadDeHilos() == 1);
            }
            THEN("el código se ejecuta normalmente") {
                elCoordinador->ejecutar();
                REQUIRE(ejecutado);
            }
        }
    }
    GIVEN("un coordinador de hilos") {
        CoordinadorHilos* elCoordinador = new CoordinadorHilos();

        char secuencia[7];
        int i = 0;
        auto codigo1 = comando(secuencia[i++] = '1');
        auto codigo2 = comando(secuencia[i++] = '2');
        auto codigo3 = comando(secuencia[i++] = '3');
        auto codigo4 = comando(secuencia[i++] = '4');
        auto codigo5 = comando(secuencia[i++] = '5');

        WHEN("se crean hilos desde el coordinador") {
            Hilo* unHilo = elCoordinador->crearHilo();
            unHilo->agregarCodigo(codigo1);
            unHilo->agregarCodigo(codigo2);

            Hilo* otroHilo = elCoordinador->crearHilo();
            otroHilo->agregarCodigo(codigo3);
            otroHilo->agregarCodigo(codigo4);
            otroHilo->agregarCodigo(codigo5);

            WHEN("se ejecuta el coordinador") {
                for (int j = 0; j < 5; j++) {
                    elCoordinador->ejecutar();
                }
                
                THEN("el código de los hilos se ejecutó entrelazado") {
                    char esperado[6] = "13245";
                    for (int j = 0; j < 5; j++) {
                        REQUIRE(secuencia[j] == esperado[j]);
                    }
                }
                THEN("los hilos se eliminan (cuando finaliza su ejecución)") {
                    REQUIRE(elCoordinador->cantidadDeHilos() == 0);
                }
            }
            WHEN("se agrega codigo al coordinador") {
                auto codigo6 = comando(secuencia[i++] = '6');
                auto codigo7 = comando(secuencia[i++] = '7');

                elCoordinador->agregarCodigo(codigo6);
                elCoordinador->agregarCodigo(codigo7);
                
                WHEN("se ejecuta el coordinador") {
                    for (int j = 0; j < 7; j++) {
                        elCoordinador->ejecutar();
                    }
                    
                    THEN("el código del coordinador se ejecuta asociado al ultimo hilo") {
                        char esperado[8] = "1324567";
                        for (int j = 0; j < 7; j++) {
                            REQUIRE(secuencia[j] == esperado[j]);
                        }
                    }
                }
            }
        }
        WHEN("se agrega codigo al coordinador") {
            auto codigo6 = comando(secuencia[i++] = '6');
            auto codigo7 = comando(secuencia[i++] = '7');

            elCoordinador->agregarCodigo(codigo6);
            elCoordinador->agregarCodigo(codigo7);

            WHEN("se crean hilos desde el coordinador") {
                Hilo* unHilo = elCoordinador->crearHilo();
                unHilo->agregarCodigo(codigo1);
                unHilo->agregarCodigo(codigo2);

                Hilo* otroHilo = elCoordinador->crearHilo();
                otroHilo->agregarCodigo(codigo3);
                otroHilo->agregarCodigo(codigo4);
                otroHilo->agregarCodigo(codigo5);

                WHEN("se ejecuta el coordinador") {
                    for (int j = 0; j < 7; j++) {
                        elCoordinador->ejecutar();
                    }
                    
                    THEN("el código del coordinador se ejecuta junto al de los hilos") {
                        char esperado[8] = "6137245";
                        for (int j = 0; j < 7; j++) {
                            REQUIRE(secuencia[j] == esperado[j]);
                        }
                    }
                }
            } 
        }
    }
}
SCENARIO("codigo anidado", "[coordinador_hilos]") {
    GIVEN("un coordinador de hilos") {
        CoordinadorHilos* elCoordinador = new CoordinadorHilos();

        WHEN("se le agregan comandos anidados") {
            int i = 0;
            char secuencia[7];

            auto codigo1_1 = comando(secuencia[i++] = '1');
            auto codigo1_2 = comando(secuencia[i++] = '2');
            auto codigo1 = comando(
                secuencia[i++] = 'a';
                elCoordinador->agregarCodigo(codigo1_1);
                elCoordinador->agregarCodigo(codigo1_2);
            );
            auto codigo2 = comando(secuencia[i++] = 'b');

            elCoordinador->agregarCodigo(codigo1);
            elCoordinador->agregarCodigo(codigo2);

            WHEN("se ejecuta el coordinador") {
                for (int j = 0; j < 4; j++) {
                    elCoordinador->ejecutar();
                }
                
                THEN("el código anidado se ejecutó en el orden correcto") {
                    char esperado[6] = "a12b";
                    for (int j = 0; j < 4; j++) {
                        REQUIRE(secuencia[j] == esperado[j]);
                    }
                }
            }
        }
        WHEN("se le agregan comandos anidados en hilos diferentes") {
            int i = 0;
            char secuencia[7];

            auto codigo1_1 = comando(secuencia[i++] = '1');
            auto codigo1_2 = comando(secuencia[i++] = '2');
            auto codigo1 = comando(
                secuencia[i++] = 'a';
                elCoordinador->agregarCodigo(codigo1_1);
                elCoordinador->agregarCodigo(codigo1_2);
            );
            auto codigo2 = comando(secuencia[i++] = 'b');
            elCoordinador->agregarCodigo(codigo1);
            elCoordinador->agregarCodigo(codigo2);

            auto codigo3_1 = comando(secuencia[i++] = '3');
            auto codigo3_2 = comando(secuencia[i++] = '4');
            auto codigo3 = comando(
                secuencia[i++] = 'c';
                elCoordinador->agregarCodigo(codigo3_1);
                elCoordinador->agregarCodigo(codigo3_2);
            );
            auto codigo4 = comando(secuencia[i++] = 'd');
            
            elCoordinador->crearHilo();
            elCoordinador->agregarCodigo(codigo3);
            elCoordinador->agregarCodigo(codigo4);

            WHEN("se ejecuta el coordinador") {
                for (int j = 0; j < 8; j++) {
                    elCoordinador->ejecutar();
                }
                
                THEN("el código anidado se ejecutó en el orden correcto") {
                    char esperado[9] = "ac1324bd";
                    for (int j = 0; j < 8; j++) {
                        REQUIRE(secuencia[j] == esperado[j]);
                    }
                }
            }
        }
        WHEN("se agregan demoras en comandos anidados en hilos diferentes") {
            int i = 0;
            char secuencia[7];

            auto codigo1_1 = comando(secuencia[i++] = '1');
            auto codigo1_2 = comando(secuencia[i++] = '2');
            auto codigo1 = comando(
                secuencia[i++] = 'a';
                elCoordinador->demorarSiguienteCodigoEn(15);
                elCoordinador->agregarCodigo(codigo1_1);
                elCoordinador->demorarSiguienteCodigoEn(5);
                elCoordinador->agregarCodigo(codigo1_2);
            );
            auto codigo2 = comando(secuencia[i++] = 'b');
            elCoordinador->agregarCodigo(codigo1);
            elCoordinador->agregarCodigo(codigo2);

            auto codigo3_1 = comando(secuencia[i++] = '3');
            auto codigo3_2 = comando(secuencia[i++] = '4');
            auto codigo3 = comando(
                secuencia[i++] = 'c';
                elCoordinador->agregarCodigo(codigo3_1);
                elCoordinador->demorarSiguienteCodigoEn(10);
                elCoordinador->agregarCodigo(codigo3_2);
            );
            auto codigo4 = comando(secuencia[i++] = 'd');
            
            elCoordinador->crearHilo();
            elCoordinador->agregarCodigo(codigo3);
            elCoordinador->agregarCodigo(codigo4);

            WHEN("se ejecuta el coordinador") {
                for (int j = 0; j < 25; j++) {
                    milisegundosActuales(j);
                    elCoordinador->ejecutar();
                }
                
                THEN("el código anidado se ejecutó en el orden correcto") {
                    char esperado[9] = "ac34d12b";
                    for (int j = 0; j < 8; j++) {
                        REQUIRE(secuencia[j] == esperado[j]);
                    }
                }
            }
        }
    }
}
