#include "catch.hpp"

#include "StubTiempoActual.h"
#include "../Hilo.h"
#include "../Lambda.h"

bool ejecutado;
SCENARIO("ejecución de código", "[multiprocesamiento]") {
    GIVEN("un hilo") {
        Hilo* elHilo = new Hilo();

        WHEN("se ejecuta código sin condiciones de tiempo") {
            bool ejecutado = false;
            auto codigo = comando(ejecutado = true);
            elHilo->agregarCodigo(codigo);
            
            THEN("el código se ejecuta cuando ejecuta el hilo") {
                REQUIRE(!ejecutado);
                elHilo->ejecutar();
                REQUIRE(ejecutado);
            }
        }
        WHEN("se pasa una referencia a una función") {
            ejecutado = false;
            funcion f1 = funcion_anonima(void, () { ejecutado = true; });
            elHilo->agregarCodigo(f1);
            
            THEN("la función se ejecuta cuando ejecuta el hilo") {
                REQUIRE(!ejecutado);
                elHilo->ejecutar();
                REQUIRE(ejecutado);
            }
        }
        WHEN("se ejecutan varios códigos sin condiciones de tiempo") {
            char secuencia[2];
            int i = 0;
            auto codigo1 = comando(secuencia[i++] = 'a');
            auto codigo2 = comando(secuencia[i++] = 'b');
            elHilo->agregarCodigo(codigo1);
            elHilo->agregarCodigo(codigo2);
            
            THEN("los codigos se ejecutan en el mismo orden") {
                REQUIRE(i == 0);
                elHilo->ejecutar();
                elHilo->ejecutar();
                REQUIRE(secuencia[0] == 'a');
                REQUIRE(secuencia[1] == 'b');
                REQUIRE(i == 2);
            }
        }
        WHEN("un codigo requiere la ejecución de otro") {
            char secuencia[4];
            int i = 0;

            auto codigo1 = comando(secuencia[i++] = '1');
            auto codigo2 = comando(secuencia[i++] = '2');
            auto codigoA = comando(
                secuencia[i++] = 'a';
                elHilo->agregarCodigo(codigo1);
                elHilo->agregarCodigo(codigo2);
            );
            auto codigoB = comando(secuencia[i++] = 'b');

            elHilo->agregarCodigo(codigoA);
            elHilo->agregarCodigo(codigoB);
            
            THEN("los codigos se ejecutan en el mismo orden") {
                REQUIRE(i == 0);
                elHilo->ejecutar();
                elHilo->ejecutar();
                elHilo->ejecutar();
                elHilo->ejecutar();
                REQUIRE(secuencia[0] == 'a');
                REQUIRE(secuencia[1] == '1');
                REQUIRE(secuencia[2] == '2');
                REQUIRE(secuencia[3] == 'b');
                REQUIRE(i == 4);
            }
        }
    }
    GIVEN("un hilo") {
        Hilo* elHilo = new Hilo();
        milisegundosActuales(0);

        WHEN("se ejecuta código con demora") {
            bool ejecutado = false;
            auto codigo = comando(ejecutado = true);
            elHilo->agregarCodigo(codigo);
            elHilo->demorarUltimoCodigoEn(1000);
            
            THEN("el código no se ejecuta inmediatamente") {
                REQUIRE(!ejecutado);
                elHilo->ejecutar();
                REQUIRE(!ejecutado);
            }
            WHEN("pasa menos tiempo del necesario") {
                milisegundosActuales(999);
                THEN("el código todavía no se ejecuta") {
                    elHilo->ejecutar();
                    REQUIRE(!ejecutado);
                }
            }
            WHEN("pasa el tiempo necesario") {
                milisegundosActuales(1000);
                THEN("el código se ejecuta") {
                    elHilo->ejecutar();
                    REQUIRE(ejecutado);
                }
            }
            WHEN("pasa más del tiempo necesario") {
                milisegundosActuales(2000);
                THEN("el código se ejecuta si no se ejecutó antes") {
                    elHilo->ejecutar();
                    REQUIRE(ejecutado);
                }
            }
            WHEN("ya se ejecutó el código") {
                milisegundosActuales(2000);
                elHilo->ejecutar();
                ejecutado = false;

                THEN("el código no se ejecuta de nuevo") {
                    elHilo->ejecutar();
                    REQUIRE(!ejecutado);
                }
            }
        }
    }
}
